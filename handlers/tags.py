from aiogram.fsm.context import FSMContext
from database import add_tag, update_thought_tag, get_tag_usage_counts
from keyboards import cancel_keyboard
from states import ThoughtState
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database import get_thoughts_by_tag
from keyboards import main_keyboard

router = Router()
PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—ã—Å–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def generate_tagged_thoughts_message(tag: str, page: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º—ã—Å–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç–µ–≥–æ–º"""
    thoughts = await get_thoughts_by_tag(tag)

    if not thoughts:
        return f"–ù–µ—Ç –º—ã—Å–ª–µ–π —Å —Ç–µ–≥–æ–º #{tag}.", None

    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    visible_thoughts = thoughts[start:end]

    response = []
    keyboard = []

    for t in visible_thoughts:
        text = f"{t.text} (üìÖ {t.created_at.strftime('%Y-%m-%d')})"
        response.append(text)

        keyboard.append([
            InlineKeyboardButton(text=f"{text[0:10]}", callback_data="noop"),
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"edit_thought:{t.id}"),
            InlineKeyboardButton(text="üóë", callback_data=f"delete_thought:{t.id}")
        ])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–µ—Å–ª–∏ –º—ã—Å–ª–µ–π –±–æ–ª—å—à–µ 5)
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tag_page:{tag}:{page-1}"))
    if end < len(thoughts):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"tag_page:{tag}:{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    return f"–ú—ã—Å–ª–∏ —Å —Ç–µ–≥–æ–º _#{tag}_:\n\n" + "\n\n".join(response), InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(F.text.startswith("#"))
async def show_thoughts_by_tag(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, #—É—á–µ–±–∞)"""
    tag_name = message.text[1:].strip().lower()  # –£–±–∏—Ä–∞–µ–º # –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    response, keyboard = await generate_tagged_thoughts_message(tag_name, 0)

    await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data.startswith("tag_page:"))
async def paginate_tag_thoughts(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –º—ã—Å–ª–µ–π —Å —Ç–µ–≥–æ–º"""
    _, tag, page = callback.data.split(":")
    page = int(page)

    response, keyboard = await generate_tagged_thoughts_message(tag, page)

    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


async def generate_tags_keyboard(thought_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–≥–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 7)"""

    tag_counts = await get_tag_usage_counts()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) –∏ –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º 7 —Ç–µ–≥–æ–≤
    top_tags = sorted(tag_counts, key=lambda t: t.usage_count, reverse=True)[:7]

    buttons = [
        [InlineKeyboardButton(text=f"{tag.name} ({tag.usage_count})", callback_data=f"tag:{thought_id}:{tag.id}")]
        for tag in top_tags
    ]

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–≥"
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–≥", callback_data=f"custom_tag:{thought_id}")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data.startswith("tag:"))
async def set_tag(callback: CallbackQuery):
    _, thought_id, tag_id = callback.data.split(":")
    await update_thought_tag(int(thought_id), int(tag_id))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª—å" –∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º—ã—Å–ª–∏"
    await callback.message.edit_text("‚úÖ –¢–µ–≥ –ø—Ä–∏—Å–≤–æ–µ–Ω, –º—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_keyboard)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    await callback.answer()


@router.callback_query(F.data.startswith("custom_tag:"))
async def ask_for_custom_tag(callback: CallbackQuery, state: FSMContext):
    _, thought_id = callback.data.split(":")
    await state.update_data(thought_id=int(thought_id))
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–≥:", reply_markup=cancel_keyboard)
    await state.set_state(ThoughtState.waiting_for_custom_tag)
    await callback.answer()


@router.message(ThoughtState.waiting_for_custom_tag)
async def save_custom_tag(message: Message, state: FSMContext):
    user_data = await state.get_data()
    thought_id = user_data["thought_id"]
    tag_id = await add_tag(message.text.strip())
    await update_thought_tag(thought_id, tag_id)

    await message.answer("‚úÖ –¢–µ–≥ –ø—Ä–∏—Å–≤–æ–µ–Ω, –º—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_keyboard)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    await state.clear()


def register_tags_handlers(dp):
    dp.include_router(router)
