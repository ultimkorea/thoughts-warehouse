from database import save_thought
from keyboards import cancel_keyboard
from states import ThoughtState, ThoughtEditState
from handlers.tags import generate_tags_keyboard
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database import get_all_thoughts
from keyboards import main_keyboard
from aiogram.fsm.context import FSMContext
from database import update_thought_text, delete_thought

router = Router()

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—ã—Å–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


@router.callback_query(F.data.startswith("delete_thought:"))
async def ask_delete_thought(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –º—ã—Å–ª–∏"""
    thought_id = int(callback.data.split(":")[1])
    await state.update_data(thought_id=thought_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")]
        ]
    )

    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –º—ã—Å–ª—å?", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def confirm_delete(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –º—ã—Å–ª—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_data = await state.get_data()
    thought_id = user_data["thought_id"]

    await delete_thought(thought_id)

    await callback.message.edit_text("‚úÖ –ú—ã—Å–ª—å —É–¥–∞–ª–µ–Ω–∞!")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º—ã—Å–ª–µ–π
    response, keyboard = await generate_thoughts_message(0)
    await callback.message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –º—ã—Å–ª–∏"""
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@router.callback_query(F.data.startswith("edit_thought:"))
async def ask_edit_thought(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—Å–ª–∏"""
    thought_id = int(callback.data.split(":")[1])
    await state.update_data(thought_id=thought_id)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π –º—ã—Å–ª–∏:")
    await state.set_state(ThoughtEditState.waiting_for_new_text)
    await callback.answer()

@router.message(ThoughtEditState.waiting_for_new_text)
async def save_edited_thought(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –º—ã—Å–ª–∏"""
    user_data = await state.get_data()
    thought_id = user_data["thought_id"]

    await update_thought_text(thought_id, message.text)

    await message.answer("‚úÖ –ú—ã—Å–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º—ã—Å–ª–µ–π
    response, keyboard = await generate_thoughts_message(0)
    await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")


async def generate_thoughts_message(page: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –º—ã—Å–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    thoughts = await get_all_thoughts()

    if not thoughts:
        return "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π.", None

    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    visible_thoughts = thoughts[start:end]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    response = []
    keyboard = []

    for t in visible_thoughts:
        text = f"{t.text} (üìÖ {t.created_at.strftime('%Y-%m-%d')})"
        if t.tag:
            text += f"\n_#{t.tag.name}_"
        response.append(text)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –º—ã—Å–ª–∏
        keyboard.append([
            InlineKeyboardButton(text=f"{text[0:10]}", callback_data="noop"),
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"edit_thought:{t.id}"),
            InlineKeyboardButton(text="üóë", callback_data=f"delete_thought:{t.id}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥)
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"thoughts_page:{page - 1}"))
    if end < len(thoughts):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"thoughts_page:{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    return "\n\n".join(response), InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º—ã—Å–ª–∏")
async def show_all_thoughts(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–µ 5 –º—ã—Å–ª–µ–π –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    response, keyboard = await generate_thoughts_message(0)
    await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data.startswith("thoughts_page:"))
async def paginate_thoughts(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥)"""
    page = int(callback.data.split(":")[1])
    response, keyboard = await generate_thoughts_message(page)

    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª—å")
async def start_thought_input(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º—ã—Å–ª—å:", reply_markup=cancel_keyboard)
    await state.set_state(ThoughtState.waiting_for_text)

@router.message(ThoughtState.waiting_for_text)
async def receive_thought(message: Message, state: FSMContext):
    text = message.text
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        await state.clear()
        return

    thought_id = await save_thought(user_id=message.from_user.id, text=text)
    keyboard = await generate_tags_keyboard(thought_id)

    await message.answer("–ó–∞–ø–∏—Å–∞–ª! –í—ã–±–µ—Ä–∏ —Ç–µ–≥:", reply_markup=keyboard)
    await state.clear()

def register_thoughts_handlers(dp):
    dp.include_router(router)
